@page "/signup"
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IUserService userService
@inject IJSRuntime JS

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<div class="container">
    <div class="row min-vh-100 d-flex justify-content-center align-items-center">
        <div class="col-md-6">
            <img src="images/mixing.png" class="img-fluid" alt="Mixing Image">
        </div>
        <div class="col-md-6">
            <h1 class="text-center">Sign Up</h1>
            <p class="mt-3">Join us and start your journey!</p>
            <EditForm Model="@request" OnValidSubmit="@ValidSubmit">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-md-12">
                        <div class="mb-3">
                            <label for="Name" class="form-label">Nome</label>
                            <input for="Name" class="form-control" @bind="@request.Name" placeholder="User name" />
                            <ValidationMessage For="@(() => request.Name)" />
                        </div>
                        <div class="mb-3">
                            <label for="Email" class="form-label">Email</label>
                            <input for="Email" class="form-control" @bind="@request.Email" placeholder="Email" />
                            <ValidationMessage For="@(() => request.Email)" />
                        </div>
                        <div class="mb-3">
                            <label for="Password" class="form-label">Password</label>
                            <input type="password" for="Password" class="form-control" @bind="@request.Password" placeholder="Password" />
                            <ValidationMessage For="@(() => request.Password)" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="mb-3">
                            <button class="btn btn-outline-secondary no-hover" type="submit">Sign Up</button>
                            <input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    RequestRegisterUserJson request = new RequestRegisterUserJson();
    string errorMessage = string.Empty;

    private async Task ValidSubmit()
    {
        errorMessage = string.Empty;

        try
        {
            await JS.InvokeVoidAsync("CursorWait");

            var response = await userService.Register(request);

            if (response != null)
                navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = "Erro inesperado: " + ex.Message;
        }
        finally
        {
            await JS.InvokeVoidAsync("CursorDefault");
        }
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("/");
    }

    private void SignIn()
    {
        navigationManager.NavigateTo("/");
    }
}
